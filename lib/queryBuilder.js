import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _type from "ramda/src/type";
import _forEachObjIndexed from "ramda/src/forEachObjIndexed";
import _mergeDeepLeft from "ramda/src/mergeDeepLeft";
import _defineProperty from "@babel/runtime-corejs3/helpers/esm/defineProperty";
import _reduceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/reduce";
import _pickBy from "ramda/src/pickBy";
import _assoc from "ramda/src/assoc";
import _includesInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/includes";
import _reduce from "ramda/src/reduce";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _path from "ramda/src/path";
import _mapObjIndexed from "ramda/src/mapObjIndexed";
import _propOr from "ramda/src/propOr";
import _identity from "ramda/src/identity";
import _filter from "ramda/src/filter";
import _includes from "ramda/src/includes";
import _map from "ramda/src/map";
import _prop from "ramda/src/prop";
import _pipe from "ramda/src/pipe";
import _pathOr from "ramda/src/pathOr";
import _union from "ramda/src/union";
import { VariableType } from 'json-to-graphql-query';

/*
create
edit
index
select
detail
tooltip
check_delete
delete
search
*/
export var QueryType;

(function (QueryType) {
  QueryType["INDEX"] = "index";
  QueryType["DETAIL"] = "detail";
  QueryType["SELECT"] = "select";
  QueryType["TOOLTIP"] = "tooltip";
  QueryType["INDEX_REL"] = "indexRelationship";
  QueryType["DETAIL_REL"] = "detailRelationship";
  QueryType["SELECT_REL"] = "selectRelationship";
  QueryType["SEARCH"] = "search";
  QueryType["CREATE"] = "create";
  QueryType["UPDATE"] = "update";
  QueryType["DELETE"] = "delete";
  QueryType["DELETE_CASCADES"] = "deleteCascades";
})(QueryType || (QueryType = {}));

var getRequiredFields = function getRequiredFields(model) {
  return _union(['__typeName', 'id'], _pathOr([], ['queryRequired'], model));
};

var getRelTableFields = function getRelTableFields(_ref) {
  var fieldName = _ref.fieldName,
      model = _ref.model;
  return _pathOr([], ['fields', fieldName, 'type', 'tableFields'], model);
};

var getQueryName = function getQueryName(schema, modelName, queryType) {
  var model = schema.getModel(modelName);

  switch (queryType) {
    case QueryType.INDEX:
    case QueryType.SELECT:
      return model.queryAllName;

    case QueryType.DETAIL:
    case QueryType.TOOLTIP:
      return model.queryName;

    case QueryType.CREATE:
    case QueryType.UPDATE:
    case QueryType.DELETE:
      return model.queryName;

    default:
      return queryType;
  }
};

var getSortVariable = function getSortVariable(modelName) {
  return "".concat(modelName, "Sort");
};

var getListVariables = function getListVariables(modelName) {
  return {
    filter: "".concat(modelName, "Filter"),
    sort: "[".concat(getSortVariable(modelName), "!]"),
    page: 'Page'
  };
};

var detailVariables = {
  id: 'Int!'
};

var getVariables = function getVariables(_ref2) {
  var modelName = _ref2.modelName,
      queryType = _ref2.queryType;

  switch (queryType) {
    case QueryType.INDEX:
      return getListVariables(modelName);

    case QueryType.DELETE:
    case QueryType.DETAIL:
    case QueryType.TOOLTIP:
      return detailVariables;

    case QueryType.SELECT:
      return {
        sort: "[".concat(getSortVariable(modelName), "!]")
      };

    case QueryType.SEARCH:
      return {
        queryString: 'String!'
      };

    case QueryType.CREATE:
      return {
        input: "".concat(modelName, "InputRequired!")
      };

    case QueryType.UPDATE:
      return {
        input: "".concat(modelName, "Input!"),
        id: 'Int!'
      };

    case QueryType.DELETE_CASCADES:
      return {
        modelName: 'String!',
        id: 'Int!'
      };
  }
};

var getArgs = function getArgs(queryType) {
  switch (queryType) {
    case QueryType.INDEX:
      return {
        filter: new VariableType('filter'),
        sort: new VariableType('sort'),
        page: new VariableType('page')
      };

    case QueryType.DELETE:
    case QueryType.DETAIL:
    case QueryType.TOOLTIP:
      return {
        id: new VariableType('id')
      };

    case QueryType.SELECT:
      return {
        sort: new VariableType('sort')
      };

    case QueryType.SEARCH:
      return {
        queryString: new VariableType('queryString')
      };

    case QueryType.CREATE:
      return {
        input: new VariableType('input')
      };

    case QueryType.UPDATE:
      return {
        input: new VariableType('input'),
        id: new VariableType('id')
      };

    case QueryType.DELETE_CASCADES:
      return {
        tableName: new VariableType('modelName'),
        id: new VariableType('id')
      };
  }
};

var getFieldQueryType = function getFieldQueryType(queryType) {
  switch (queryType) {
    case QueryType.INDEX:
      return QueryType.INDEX_REL;

    case QueryType.DETAIL:
      return QueryType.DETAIL_REL;

    case QueryType.SELECT:
      return QueryType.SELECT_REL;

    default:
      return queryType;
  }
};

var getQueryIndexFields = function getQueryIndexFields(schema, modelName) {
  var indexFields = schema.getIndexFields({
    modelName: modelName,
    customProps: {}
  });

  var fields = _pipe(_prop('fields'), _map(function (field) {
    return _includes(_prop('fieldName', field), indexFields) || _prop('queryIndex', field);
  }))(schema.getModel(modelName));

  return _filter(_identity, fields);
};

var getQueryDetailFields = function getQueryDetailFields(schema, modelName) {
  var fields = _filter(function (field) {
    return (_propOr(true, 'showDetail', field) || _prop('queryDetail', field)) && !_prop('virtualField', field);
  }, schema.getFields(modelName));

  var model = schema.getModel(modelName);
  return _mapObjIndexed(function (val, key) {
    var show = _pathOr(true, ['fields', key, 'showDetail'], model) || _path(['fields', key, 'queryDetail'], model);

    return _pathOr(show, ['fields', key, 'type', 'type'], model);
  }, fields);
}; // needs to be removed?


var makeRelayNodeConnection = function makeRelayNodeConnection(nodeQueryObj) {
  return _Object$assign({
    __typename: true
  }, nodeQueryObj);
};

var getRelFieldObject = function getRelFieldObject(_ref3) {
  var schema = _ref3.schema,
      modelName = _ref3.modelName,
      fieldName = _ref3.fieldName;
  var relFieldObject = {
    id: true
  };

  var targetModel = _path(['type', 'target'], schema.getField(modelName, fieldName));

  var targetModelDisplayField = _propOr('name', 'displayField', schema.getModel(targetModel));

  if (targetModelDisplayField) {
    relFieldObject[targetModelDisplayField] = true;
  } // todo: targetModelDisplayField can be function and not string???


  return relFieldObject;
};

var buildTooltipFieldsObject = function buildTooltipFieldsObject(_ref4) {
  var schema = _ref4.schema,
      modelName = _ref4.modelName;
  // todo: insert customProps from outside application
  var fields = schema.getTooltipFields({
    modelName: modelName,
    customProps: {}
  });
  return _pipe(_reduce(function (accumulator, fieldName) {
    var type = schema.getType(modelName, fieldName);

    if (_includesInstanceProperty(type).call(type, 'ToMany')) {
      return _assoc(fieldName, makeRelayNodeConnection(getRelFieldObject({
        schema: schema,
        modelName: modelName,
        fieldName: fieldName
      })), accumulator);
    } else if (_includesInstanceProperty(type).call(type, 'ToOne')) {
      return _assoc(fieldName, getRelFieldObject({
        schema: schema,
        modelName: modelName,
        fieldName: fieldName
      }), accumulator);
    } else {
      return _assoc(fieldName, true, accumulator);
    }
  }, {}))(fields);
};

var pickFields = function pickFields(arr, fields) {
  return _pickBy(function (val, key) {
    return _includes(key, arr);
  }, fields);
};

var buildFieldsObject = function buildFieldsObject(_ref5) {
  var schema = _ref5.schema,
      queryType = _ref5.queryType,
      modelName = _ref5.modelName,
      _ref5$queryFields = _ref5.queryFields,
      queryFields = _ref5$queryFields === void 0 ? [] : _ref5$queryFields;
  var model = schema.getModel(modelName);
  var required = getRequiredFields(model);

  var requiredObj = _reduceInstanceProperty(required).call(required, function (acc, val) {
    return _Object$assign({}, acc, _defineProperty({}, val, true));
  }, {});

  if (queryType === QueryType.TOOLTIP) {
    return buildTooltipFieldsObject({
      schema: schema,
      modelName: modelName
    });
  }

  var fields = function () {
    switch (queryType) {
      case QueryType.INDEX:
        return getQueryIndexFields(schema, modelName);

      case QueryType.DETAIL:
        return getQueryDetailFields(schema, modelName);

      case QueryType.DETAIL_REL:
        return pickFields(queryFields, getQueryDetailFields(schema, modelName));

      default:
        return {};
    }
  }();

  fields = _mergeDeepLeft(requiredObj, fields); // replace with query object when fieldName is Relationship type

  fields = _mapObjIndexed(function (val, key) {
    var field = schema.getField(modelName, key);

    if (!schema.isRel(modelName, key)) {
      return val;
    }

    return buildFieldsObject({
      schema: schema,
      queryType: getFieldQueryType(queryType),
      modelName: _path(['type', 'target'], field),
      queryFields: getRelTableFields({
        model: model,
        fieldName: key
      })
    });
  }, fields);
  return fields;
};

var buildSearchFieldsArray = function buildSearchFieldsArray(schema) {
  var fieldsArray = [];

  _forEachObjIndexed(function (model) {
    if (schema.getSearchable(model.modelName)) {
      fieldsArray.push(buildSearchFieldsObject(schema, model));
    }
  }, schema.schemaJSON);

  return fieldsArray;
};

var buildSearchFieldsObject = function buildSearchFieldsObject(schema, model) {
  var required = getRequiredFields(model);

  var requiredObj = _reduceInstanceProperty(required).call(required, function (acc, val) {
    return _Object$assign({}, acc, _defineProperty({}, val, true));
  }, {});

  var fields = {};
  fields.id = true;

  if (_type(model.displayField) === 'String') {
    fields[model.displayField] = true;
  }

  fields = _mergeDeepLeft(requiredObj, fields);
  fields.__typeName = model.modelName;
  fields = _mapObjIndexed(function (val, key) {
    var field = schema.getField(model.modelName, key);

    if (!schema.isRel(model.modelName, key)) {
      return val;
    }

    return buildSearchFieldsObject(schema, schema.getModel(_path(['type', 'target'], field)));
  }, fields);
  return fields;
};

var buildDeleteCascadesArray = function buildDeleteCascadesArray(schema) {
  var cascadesArray = [];

  _forEachObjIndexed(function (model) {
    cascadesArray.push(buildCascadesObject(schema, model));
  }, schema.schemaJSON);

  return cascadesArray;
};

var buildCascadesObject = function buildCascadesObject(schema, model) {
  var required = getRequiredFields(model);

  var requiredObj = _reduceInstanceProperty(required).call(required, function (acc, val) {
    return _Object$assign({}, acc, _defineProperty({}, val, true));
  }, {});

  var cascades = {};
  cascades.__typename = true;
  cascades.id = true;

  if (_type(model.displayField) === 'String') {
    cascades[model.displayField] = true;
  }

  cascades = _mergeDeepLeft(requiredObj, cascades);
  cascades.__typeName = model.modelName;
  cascades = _mapObjIndexed(function (val, key) {
    var field = schema.getField(model.modelName, key);

    if (!schema.isRel(model.modelName, key)) {
      return val;
    }

    return buildCascadesObject(schema, schema.getModel(_path(['type', 'target'], field)));
  }, cascades);
  return cascades;
};

export var makeQueryBuilder = function makeQueryBuilder(schema) {
  return function (_ref6) {
    var _context;

    var modelName = _ref6.modelName,
        _ref6$queryType = _ref6.queryType,
        queryType = _ref6$queryType === void 0 ? QueryType.INDEX : _ref6$queryType;
    var queryName = getQueryName(schema, modelName, queryType);
    var queryVariables = getVariables({
      modelName: modelName,
      queryType: queryType
    });

    switch (queryType) {
      case QueryType.INDEX:
      case QueryType.DETAIL:
      case QueryType.SELECT:
      case QueryType.TOOLTIP:
        return {
          query: _defineProperty({
            __variables: queryVariables
          }, queryName, {
            __args: getArgs(queryType),
            result: _Object$assign({}, buildFieldsObject({
              schema: schema,
              modelName: modelName,
              queryType: queryType
            })),
            errors: true,
            count: queryType === QueryType.INDEX
          })
        };

      case QueryType.SEARCH:
        return {
          query: {
            __variables: queryVariables,
            search: {
              __args: getArgs(queryType),
              __typename: true,
              __on: buildSearchFieldsArray(schema)
            }
          }
        };

      case QueryType.CREATE:
      case QueryType.UPDATE:
      case QueryType.DELETE:
        return {
          mutation: _defineProperty({
            __variables: queryVariables
          }, _concatInstanceProperty(_context = "".concat(queryType)).call(_context, modelName), {
            __args: getArgs(queryType),
            result: {
              __typename: true,
              id: true
            },
            errors: true
          })
        };

      case QueryType.DELETE_CASCADES:
        return {
          query: {
            __variables: queryVariables,
            checkDelete: {
              __args: getArgs(queryType),
              __on: buildDeleteCascadesArray(schema)
            }
          }
        };
    }
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,